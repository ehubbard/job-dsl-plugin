buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.3'
    }
}

project(':job-dsl-core') {
    // jpi plugin will install appropriate repos for job-dsl-plugin
    repositories {
        mavenCentral()
    }
}

defaultTasks 'build' // For BuildHive

subprojects {
    group='hu.rxd'
    // group = 'org.jenkins-ci.plugins'

    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply plugin: 'maven' // For artifactory publishing
    apply plugin: 'eclipse'
    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    dependencies {
        compile 'org.codehaus.groovy:groovy-all:2.1.+'
        compile 'com.google.guava:guava:14.0.1'
        testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
        testCompile 'junit:junit-dep:4.10'
    }
    test {
        useJUnit() // Causes "failed to create temp file to extract class from jar into"
    }
}

project(':job-dsl-core') {

    apply plugin: 'application'
    apply plugin: 'signing'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    description = "Generates Jenkins jobs via a DSL (fork)"
    dependencies {
        compile 'org.slf4j:slf4j-simple:1.4.3' // For perforce
        compile 'commons-codec:commons-codec:1.8' // For perforce
        compile 'org.apache.ivy:ivy:2.2.0' // Groovy Optional dependency, needed for @Grab
        compile 'xmlunit:xmlunit:1.4' // For runtime use, not just for testing
    }
    jar {
        manifest {
            attributes('Main-Class': 'javaposse.jobdsl.Run')
        }
    }
    mainClassName = 'javaposse.jobdsl.Run'

    apply plugin: 'gradle-one-jar'

    task jarSources(type:Jar){
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task jarJavadocs (type: Jar, dependsOn: 'javadoc') {
        from project.javadoc.destinationDir
        classifier = 'javadoc'
    }

    task jarGroovydocs (type: Jar, dependsOn: 'groovydoc') {
        from project.groovydoc.destinationDir
        classifier = 'groovydoc'
    }

    task oneJar(type: OneJar) {
        mainClass = project.mainClassName
    }

    signing {
        sign configurations.archives
    }

    artifacts {
        archives jarJavadocs
        archives jarGroovydocs
        archives jarSources
//        archives oneJar
    }

    run {
        if ( project.hasProperty('args') ) {
            args project.args.split('\\s+')
        }
    }

    // gradle-jpi plugin does this for plugins, so we're mimicing it to get our additional artifacts up to repo.jenkinsci.org
    gradle.taskGraph.whenReady { taskGraph ->
        if ( taskGraph.hasTask(uploadArchives) ) {
            uploadArchives {
                repositories {
                    mavenDeployer {
                        beforeDeployment { MavenDeployment deployment -> signPom(deployment) }

//                        def credentials = loadCredentialsForJenkinsCommunityRepository()
			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
			  authentication(userName: sonatypeUsername, password: sonatypePassword)
			}
			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
			  authentication(userName: sonatypeUsername, password: sonatypePassword)
			}
/*
                        repository(url: 'http://maven.jenkins-ci.org:8081/content/repositories/releases') {
                            authentication(credentials)
                        }
                        snapshotRepository(url: 'http://maven.jenkins-ci.org:8081/content/repositories/snapshots') {
                            authentication(credentials)
                        }
*/
				pom.project {
			   name 'job-dsl-core'
			   packaging 'jar'
			   description 'Javaposse jenkins job-dsl-core'
			   url 'https://github.com/kgyrtkirk/job-dsl-core'
 
			   scm {
				   url 'https://github.com/kgyrtkirk/job-dsl-core.git'
				   connection 'scm:https://github.com/kgyrtkirk/job-dsl-core.git'
				   developerConnection 'scm:git@github.com/kgyrtkirk/job-dsl-core.git'
			   }
 
			   licenses {
				   license {
					   name 'The Apache Software License, Version 2.0'
					   url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					   distribution 'repo'
				   }
			   }
 
			   developers {
				   developer {
					   id 'jryan'
					   name 'Justin Ryan'
					   email 'jryan@netflix.com'
				   }
				   developer {
					   id 'andrew'
					   name 'Andrew Harmel-Law'
					   email 'andrew@harmel-law.com'
				   }
				   developer {
					   id 'sit'
					   name 'Emil Sit'
					   email 'sit@hadapt.com'
				   }
				   developer {
					   id 'kirk'
					   name 'Zoltan Nagy'
					   email 'kirk@rxd.hu'
				   }
			   }
		   }

                    }
                }
            }
        }
    }

}

private Map loadCredentialsForJenkinsCommunityRepository() {
    Properties props = new Properties()
    def dot = new File(System.getProperty("user.home"), ".jenkins-ci.org")

    if ( ! dot.exists() ) {
        throw new Exception("Trying to deploy to Jenkins community repository but there's no credential file ${dot}. See https://wiki.jenkins-ci.org/display/JENKINS/Dot+Jenkins+Ci+Dot+Org")
    }

    dot.withInputStream { i -> props.load(i) }
    return [userName: props["userName"], password: props["password"]]
}


project(':job-dsl-plugin') {
    description = "This plugin allows definition of Jobs via a DSL, using existing Jobs as a template."
    dependencies {
        compile project(':job-dsl-core')
        compile 'org.codehaus.groovy:groovy-all:1.8.6'
    }
}

task wrapper(type: Wrapper) { gradleVersion = '1.8' }

apply from: './job-dsl-plugin/ide.gradle'

